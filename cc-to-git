#!/usr/bin/env python
import sys
import inspect
from optparse import OptionParser

from cctogitlogger import CcToGitLogger
from constants import GitCcConstants
from os.path import join
import os

commands = [
    'configure', 'init', 'migrate', 'reset', 'tag'
]


def main():

    path = os.getcwd().split(GitCcConstants.file_separator())
    CcToGitLogger(join(GitCcConstants.file_separator().join(path), GitCcConstants.conf_dir(), GitCcConstants.logger_conf_name()))

    args = sys.argv[1:]
    for cmd in commands:
        if args and cmd == args[0]:
            return invoke(cmd, path, args)
    usage()


def extract_name(arg):
    name = arg if not arg.startswith('--') else arg[2:]
    if name.count('=') > 0:
        return name.split('=')[0]
    else:
        return name


def add_parameter(args, name, default):
        i = 1

        for i in range(len(args)-1):
            if extract_name(args[i+1]) == name:
                if args[i+1].count('=') > 0:
                    return args[i+1].split('=')[1]
                else:
                    return True
        return default


def invoke(cmd_name, git_cc_dir, args):
    cmd = __import__(cmd_name)

    _args, _, _, defaults = inspect.getargspec(cmd.main)

    defaults = defaults if defaults else []
    diff = len(_args) - len(defaults)
    _args = _args[diff:]
    parser = OptionParser(description=cmd.__doc__)
    parameters = []
    for (name, default) in zip(_args, defaults):
        if name == 'git_cc_dir':
            continue
        option = {
            'default': default,
            'help': cmd.ARGS[name],
            'dest': name,
        }
        if not default:
            option['action'] = "store"
        name = name.replace('_', '-')
        parser.add_option('--' + name, **option)
        parameters.append(add_parameter(args, name, default))

    if len(args) + 1 < diff:
        parser.error("incorrect number of arguments")

    cmd.main(git_cc_dir, *parameters)


def usage():
    print('\nusage: cc-to-git COMMAND [ARGS]\n')
    width = 11
    for cmd_name in commands:
        cmd = __import__(cmd_name)
        print('    %s %s' % (cmd.__name__.ljust(width), cmd.__doc__.split('\n')[0]))
    sys.exit(2)

if __name__ == '__main__':
    main()
