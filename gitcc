#!/usr/bin/env python
import sys
import inspect
from optparse import OptionParser
from gitcclogger import GitCcLogger
from configuration import ConfigParser
from constants import GitCcConstants
from os.path import join

commands = [
    'init', 'rebase', 'checkin', 'sync', 'reset', 'tag', 'update'
]


def main():
    directories = ConfigParser.git_dir().split(GitCcConstants.file_separator())[:-1]
    GitCcLogger(join(GitCcConstants.file_separator().join(directories), GitCcConstants.logger_name()))

    args = sys.argv[1:]
    for cmd in commands:
        if args and cmd == args[0]:
            return invoke(cmd, args)
    usage()


def invoke(cmd_name, args):
    cmd = __import__(cmd_name)
    _args, _, _, defaults = inspect.getargspec(cmd.main)

    defaults = defaults if defaults else []
    diff = len(_args) - len(defaults)
    _args = _args[diff:]
    parser = OptionParser(description=cmd.__doc__)
    for (name, default) in zip(_args, defaults):
        option = {
            'default': default,
            'help': cmd.ARGS[name],
            'dest': name,
        }
        if not default:
            option['action'] = "store"
        name = name.replace('_', '-')
        parser.add_option('--' + name, **option)

    (options, args) = parser.parse_args(args[1:])
    if len(args) < diff:
        parser.error("incorrect number of arguments")

    for name in _args:
        args.append(getattr(options, name))
    cmd.main(*args)


def usage():
    print('\nusage: gitcc COMMAND [ARGS]\n')
    width = 11
    for cmd_name in commands:
        cmd = __import__(cmd_name)
        print('    %s %s' % (cmd.__name__.ljust(width), cmd.__doc__.split('\n')[0]))
    sys.exit(2)

if __name__ == '__main__':
    main()
